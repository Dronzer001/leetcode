class Solution {
  public:
    int minCost(vector<int>& arr) {
        // code here
        if(arr.size()==1) return 0;
        int sum=0;
        priority_queue<int,vector<int>,greater<int>>pq(arr.begin(),arr.end());
        while(pq.size()>1){
            int f=pq.top();
            pq.pop();
            int s=pq.top();
            pq.pop();
            int s1=f+s;
            sum+=s1;
            pq.push(s1);
        }
        return sum;
    }
};

/*
Use a min-heap (priority queue) to efficiently get the two smallest ropes.

Repeatedly extract two smallest ropes, combine them, add the cost to total, and push the combined rope back.

Continue until all ropes are merged.
*/
